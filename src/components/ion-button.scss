@use '../utils/api';

/**
 * Note: ion-back-button should not put inner ion-button.
 * feat(): ion-config new property for disable ion-back-button Animation
 */

@mixin theme-buttons {
  @include api.glass-background;
  border-radius: 25px;
  overflow: hidden;
  transition: transform 100ms ease-out !important;

  &:has(.ion-activated) {
    transform: scale(1.28);
  }

  ion-button:not(.ios26-disabled),
  ion-back-button:not(.ios26-disabled) {
    transform: none;
    &::part(native) {
      /**
       * TODO: remove !important.
       */
      box-shadow: none !important;
      border: none !important;
      background: transparent !important;
      backdrop-filter: none !important;
    }
  }

  ion-button:not(.ios26-disabled) {
    margin: 0;
    :first-child {
      margin-left: -8px;
    }
    :last-child {
      margin-right: -8px;
    }
    :only-child {
      margin: 0;
    }
  }

  :has(ion-back-button) {
    margin: 0;
  }
}

@mixin theme-button() {
  max-height: inherit;

  transition:
    transform 100ms ease-out,
    color 50ms ease;
  will-change: transform;

  &.ion-activated {
    transform: scale(1.28);
    box-shadow: none;
  }

  // button size default
  font-size: 1.05rem;
  &:not(.button-has-icon-only):not(.back-button-has-icon-only)::part(native) {
    padding: 0 16px;
    min-height: 44px;
  }

  &.button-small {
    font-size: 1.04rem;
    &:not(.button-has-icon-only):not(.back-button-has-icon-only)::part(native) {
      padding: 0 12px;
      min-height: 36px;
    }
  }

  &.button-large {
    font-size: 1.06rem;
    &:not(.button-has-icon-only):not(.back-button-has-icon-only)::part(native) {
      padding: 0 20px;
      min-height: 52px;
    }
  }

  &::part(native) {
    border-radius: 25px;
  }

  // fill:default only
  &:not(.button-solid):not(.ios26-button-solid):not(.button-outline):not(.ios26-button-outline):not(.button-clear):not(
      .ios26-button-clear
    ) {
    --background-hover: transparent;
    --background-activated: transparent;
    &::part(native) {
      @include api.glass-background;
      border-radius: 25px;
    }
    opacity: 1; // for ion-back-button
    --color: rgba(var(--ion-text-color-rgb, 0, 0, 0), 1);
    &.ion-color {
      --color: rgba(var(--ion-color-base-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 1);
    }
    &.ion-activated {
      --color: rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.1);
      &.ion-color {
        --color: rgba(var(--ion-color-base-rgb, var(--ion-text-color-rgb, 0, 0, 0)), 0.1);
      }
      &::part(native) {
        opacity: 1; // for ion-back-button
      }
    }
  }

  // fill: outline or default
  &:not(.button-solid):not(.ios26-button-solid):not(.button-clear):not(.ios26-button-clear) {
  }

  &.button-has-icon-only,
  &.back-button-has-icon-only {
    &::part(native) {
      border-radius: 50%;
      width: 44px;
      height: 44px;
      padding: 2px;
    }
    &.button-small::part(native) {
      width: 36px;
      height: 36px;
    }

    &.button-large::part(native) {
      width: 52px;
      height: 52px;
    }

    ion-icon {
      font-size: 1.4rem;
      &[name='close-outline'] {
        font-size: 2rem;
      }
    }
  }
}

ion-buttons.ios:not(.ios26-disabled) {
  @include theme-buttons;
  ion-button:not(.ios26-disabled),
  ion-back-button:not(.ios26-disabled) {
    @include theme-button;
  }
}

ion-button.ios:not(.ios26-disabled) {
  @include theme-button;
}
ion-back-button.ios:not(.ios26-disabled) {
  @include theme-button;
  margin-left: calc(12px + var(--ion-safe-area-left));
  margin-right: calc(12px + var(--ion-safe-area-right));
}
